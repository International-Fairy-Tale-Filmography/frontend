@page "/company"

@using Microsoft.EntityFrameworkCore
@using Data.Core.Models
@inject DataEditorDataContext ctx
@inject IDialogService DialogService

<h3>Company List</h3>

<MudButton OnClick="@AddItem" Color="@Color.Success" Class="add-item-btn">Add Item</MudButton>

<MudDataGrid T="Company" Items="@Items" ReadOnly="true" Virtualize="true"
             Bordered="true" Dense="true" Loading="_loading">
    <Columns>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@((e) => EditCell(context.Item))" />
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="x => x.Name" />
        <PropertyColumn Property="x => x.Description" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Company" />
    </PagerContent>
</MudDataGrid>


@code {
    public bool _loading { get; set; }

    public List<Company> Items { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    async Task Refresh()
    {
        _loading = true;
        Thread.Sleep(10);
        Items = await ctx.Companies.ToListAsync();
        _loading = false;
    }

    async Task<EventCallback> EditCell(Company cell)
    {
        await EditItem(cell.CompanyId);
        return EventCallback.Empty;
    }

    async Task AddItem()
    {
        await EditItem(0);
    }

    async Task EditItem(int id)
    {
        var parameters = new DialogParameters<CompanyEdit> { { x => x.Id, id } };
        var dialog = await DialogService.ShowAsync<CompanyEdit>("Edit", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await Refresh();
        }

    }

}