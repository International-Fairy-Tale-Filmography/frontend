@using Microsoft.EntityFrameworkCore
@using DataEditor.Core.Services
@using Data.Core.Models
@using Origin = MudBlazor.Origin
@inject DataEditorDataContext ctx

@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudTextField @bind-Value="item.Title" Label="Title"></MudTextField>
        <MudTextField @bind-Value="item.OtherTitle" Label="Other Title"></MudTextField>
        <MudTextField @bind-Value="item.Color" Label="Color"></MudTextField>
        <MudTextField @bind-Value="item.ReleaseYear" Label="Release Year"></MudTextField>
        <MudTextField @bind-Value="item.Duration" Label="Duration"></MudTextField>
        <MudTextField @bind-Value="item.Mode" Label="Mode"></MudTextField>
        <MudTextField @bind-Value="item.Comment" Label="Comment"></MudTextField>
        
        <MudSelectExtended ItemCollection="complexes" ToStringFunc="@(v => v?.Text)"
                           
                           ValuePresenter="ValuePresenter.Chip" MultiSelection="true" T="Complex" @bind-SelectedValues="complexValues" Label="Complex Type" AnchorOrigin="Origin.BottomCenter"
                           ChipCloseable="true" ChipSize="Size.Small" ChipVariant="Variant.Filled" NoWrap="false"
                           SearchBox="true" SearchBoxAutoFocus="true" SearchBoxClearable="true" SearchFunc="@(new Func<Complex, string, bool>(SearchItems))">
        </MudSelectExtended>

        <MudCheckBox @bind-Value="item.Published"></MudCheckBox>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Error" OnClick="Save">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public int Id { get; set; } = 0;

    public Film item { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            item = await ctx.Films.FirstAsync(i => i.FilmId == Id);
        }
        else
        {
            item = new Film();
        }

    }

    private async Task Save()
    {
        if (Id == 0)
        {
            
            await ctx.Films.AddAsync(item);
        }
        else
        {
            ctx.Films.Update(item);
        }

        await ctx.SaveChangesAsync();
        Snackbar.Add($"{item.Title} queued!", Severity.Success);
        MudDialog.Close();

    }

    private void Cancel() => MudDialog.Cancel();

    //

    IEnumerable<Complex> complexValues { get; set; } = new HashSet<Complex>() { };

    public class Complex
    {
        public int? Value { get; set; }
        public string? Text { get; set; }
    }

    private Complex[] complexes =
    {
        new Complex() { Value = 1, Text = "A"},
        new Complex() { Value = 2, Text = "B"},
        new Complex() { Value = 3, Text = "C"},
        new Complex() { Value = 4, Text = "D"},
        new Complex() { Value = 5, Text = "E"},
    };

    private bool SearchItems(Complex value, string searchString)
    {
        if (searchString == "")
        {
            return true;
        }

        if (value.Text.StartsWith(searchString, StringComparison.CurrentCultureIgnoreCase))
        {
            return true;
        }

        return false;
    }

}
